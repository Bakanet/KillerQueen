Bonus de Pokemon : coder un simulateur de combats strategiques.

Les problemes majeurs :
- avoir toutes les stats d'une attaques, d'un Pokemon, les effets secondaires pouvant s'appliquer et calculer tout ca
- limiter les attaques disponibles des Pokemon SANS QUE CA PRENNE 3 GO DE PLACE
- tout faire via des classes

Database.cs :
Ce fichier contient des enum pour tout ce dont on aura besoin en termes de donnees dans nos classes. Poketype definit les types existants des Pokemon et leur attribue un int pour
la table des types. Pomon enumere tous les Pokemon disponibles pour le programme (le type Pomon sera utile pour que l'user sache quels Pokemon mettre). L'enum State sera utilise pour les
attaques avec des effets particuliers (Sommeil, Brulure, etc...).

StratPokemon.cs :
Ce fichier contient une premiere classe Stats composee de plusieurs getter/setter pour definir les stats et types de nos Pokemon.
Ca nous sera utile pour la classe StratPokemon qui aura un dictionnaire dans le constructeur. Ce dictionnaire a pour cle un Pokemon (du type Pomon) et en valeur retournee un ensemble
de stats qui vient de la classe Stats et qui nous permet de recuperer ces stats pour les calculs de degats. La vie du Pokemon est determinee via un calcul (source : Bulbapedia).
On a ensuite la methode GetHurt, quand un Pokemon prend des degats, la methode Heal pour le soigner (avec le booléen qui determine s'il est KO ou non).

Move.cs :
On utilise la meme methode de creer une classe pour les stats de notre attaque et on les recupere via un dictionnaire.
La methode Damages va calculer les degats d'une attaque (et sa precision), selon les calculs utilises par le jeu.
La classe TypeTable calcule les affinites de type pour les reutiliser dans les calculs de degats.

Fight.cs :
Cette methode statique sera celle qui recupere les donnees de toutes les autres classes et qui determine si l'on peut continuer a jouer, qu'est-ce qu'il se passe quand on switch de Pokemon...
Chaque team sera representee par une array d'objets de la classe StratPokemon. La methode AvailablePokemon va print tous les Pokemon disponibles, il est important de bien entrer l'entier
correspondant à quel Pokemon on veut mettre dans notre equipe, sinon ca ne fonctionnera pas. On utilise CreateTeam pour creer les deux equipes qui vont s'affronter.
La methode Switch permet le switch d'un Pokemon en premiere position de la team. La methode PrintBoard fait un affichage des Pokemon actuels des deux equipes ainsi que leurs attaques.
La methode Turn appelle toutes les methodes necessaires pour faire un tour de jeu.
Les grosses boucles while moches avec "Choose a valid number" servent a faire en sorte que le joueur ne puisse pas casser le jeu en choisissant un Pokemon non-existant.



Au final la partie combat ne fonctionne pas. C'est triste. Jouez sur Pokemon Showdown, ce sera mieux :(